#! /bin/bash
#=========================================================================
# Copyright (c) 2015 GemTalk Systems, LLC <dhenrich@gemtalksystems.com>.
#=========================================================================

echo "================="
echo "   GsDevKit script: $(basename $0) $*"
echo "              path: $0"
echo "================="

usage() {
  cat <<HELP
USAGE: $(basename $0) [-h] [ -f | -d <dev-GS_HOME-path> | -m <master-GS_HOME-path ] 
                      [-o <old-stone-name] <stone-name> <gemstone-version>

OPTIONS
  -h
     display help
EXAMPLES
  $(basename $0) -h
  $(basename $0) -d /export/foos1/users/dhenrich/gsDevKitHome seaside 3.2.2
  $(basename $0) -m /export/foos1/users/dhenrich/old_gsDevKitHome gs_3106 3.1.0.6
  $(basename $0) -o gs_3106 -m /export/foos1/users/dhenrich/old_gsDevKitHome gso_3106 3.1.0.6
  $(basename $0) -f gs_3106 3.1.0.6

HELP
}

PLATFORM="`uname -sm | tr ' ' '-'`"
if [[ "$PLATFORM" == MINGW32_NT* ]] ; then
  echo "This script is a server-only script and cannot be used on Windows"
  exit 1
fi

set -e # exit on error
if [ "${GS_HOME}x" = "x" ] ; then
  echo "the GS_HOME environment variable needs to be defined"; exit 1
fi
source ${GS_HOME}/bin/defGsDevKit.env

master_GS_HOME="false"
dev_GS_HOME="false"
foreign="false"
oldStonePath=""
while getopts "hfd:m:o:" OPT ; do
  case "$OPT" in
    h) usage; exit 0;;
    f) 
      if [ "$oldGsDevKitHome{}x" != "x" ] ; then
        echo "only one of -f, -m or -d options may be used"; usage; exit 1
      fi
      oldGsDevKitHome="XXX"
      foreign="true"
      ;;
    d) 
      if [ "${oldGsDevKitHome}x" != "x" ] ; then
        echo "only one of -f, -m or -d options may be used"; usage; exit 1
      fi
      oldGsDevKitHome="${OPTARG}"
      dev_GS_HOME="true"
      ;;
    m) 
      if [ "$oldGsDevKitHome{}x" != "x" ] ; then
        echo "only one of -f, -m or -d options may be used"; usage; exit 1
      fi
      oldGsDevKitHome="${OPTARG}"
      master_GS_HOME="true"
      ;;
    o) oldStoneName="${OPTARG}";;
    *) usage; exit 1;;
  esac
done
shift $(($OPTIND - 1))

if [ $# -ne 2 ]; then
  usage; exit 1
fi
stoneName=$1
vers=$2
if [ "${oldStoneName}x" = "x" ] ; then 
  oldStoneName=$stoneName
fi

if [ "${GS_SERVER}x" = "x" ] ; then
  $GS_HOME/bin/private/clone_gs_server
  source ${GS_HOME}/bin/defGsDevKit.env
fi

if [ -d $GS_SERVER_STONES/$stoneName ] ; then
  echo "stone $stoneName already exists. Use the -o option and use a different stone name"
  usage
  exit 1
fi

echo "Attaching stone $stoneName"

$GS_HOME/bin/downloadGemStone $vers

if [ "${foreign}" = "true" ] ; then
  $GS_HOME/bin/private/gsDevKitCommandLine createForeignStone $stoneName $vers 
else
  oldStonePath=${oldGsDevKitHome}/gemstone/stones/$stoneName
  if [ "${master_GS_HOME}x" != "x" ] ; then
    oldClientDescriptionsPath="${oldGsDevKitHome}/tode/client/descriptions/${oldStoneName}"
    oldStoneHomePath="${oldGsDevKitHome}/tode/home"
    oldStoneProjectsPath=""
  fi
  if [ "${dev_GS_HOME}x" != "x" ] ; then
    oldClientDescriptionsPath="${oldGsDevKitHome}/tode/sys/local/client/descriptions/${odlStoneName}"
    oldStoneHomePath="${oldGsDevKitHome}/tode/sys/stones/${oldStoneName}/home"
    oldStoneProjectsPath="${oldGsDevKitHome}/tode/sys/${oldStoneName}/projects"
  fi
  cp $oldClientDescriptionsPath $GS_SHARED_SESSIONS
fi

echo "...finished $(basename $0)"
