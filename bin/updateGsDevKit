#! /usr/bin/env bash
#=========================================================================
# Copyright (c) 2015 GemTalk Systems, LLC <dhenrich@gemtalksystems.com>.
#=========================================================================

echo "================="
echo "   GsDevKit script: $(basename $0) $*"
echo "              path: $0"
echo "================="

usage() {
  cat <<HELP
USAGE: $(basename $0) [-h] [-g] [-t] [-i] [-c] [-d] [-s] [-p <patch-name>]

With the -g option, update the GsDevKit_home components:
  update clones (if present):
    GsDevKit_home          - \$GS_HOME
    GsDevKit_gs_server     - \$GS_HOME/server
    GsDevKit_gs_client_dev - \$GS_HOME/dev
    GsDevKit_sys_local     - \$GS_HOME/local
    GsDevKit_todeClient    - \$GS_HOME/dev/todeClient

With the -t option, update the tODE components:
  update \$GS_HOME/shared/repos/tode clone

With the -i option rebuild the tODE client images and the devKitCommandLine image.
With the -c option rebuild the tODE client images.
With the -d option rebuild the devKitCommandLine image.

With no options present, update both GsDevKit_home, tODE components, tODE client 
images, and the devKitCommandLine image (equivalent to the \`-gcdt\` option).

OPTIONS
  -h
     display help
  -c
     Rebuild tODE client images
  -d
     Rebuild the devKitCommandLine image
  -g
     Update GsDevKit_home components
  -i
     Rebuild the tODE client images and the devKitCommandLine image
  -p <patch-name>
     update should include patch for given <patch-name> . Currently only \`-p issue7\` is supported.
  -t
     Update tode project clone and tODE components
  -s
     Update the shared tODE project clones:
       filetree
       glass
       Grease
       metacello-work
       PharoCompatibility
       rb
       ston
       tode

EXAMPLES
  $(basename $0) -h
  $(basename $0)
  $(basename $0) -g
  $(basename $0) -s
  $(basename $0) -t
  $(basename $0) -g -t -i
  $(basename $0) -g -t -i -s

HELP
}

set -e # exit on error
if [ "${GS_HOME}x" = "x" ] ; then
  echo "the GS_HOME environment variable needs to be defined"
  exit 1
fi
source ${GS_HOME}/bin/defGsDevKit.env

source ${GS_HOME}/bin/private/shFunctions
verify_gsdevkit_installation

noopts="true"

patchName=""
updateSharedClones="false"
rebuildCommandLine="false"
rebuildTodeClient="false"
updateGsDevKitClones="false"
updateTodeClone="false"
while getopts "cdhgtip:s" OPT ; do
  noopts="false"
  case "$OPT" in
    h) usage; exit 0;;
    c) rebuildTodeClient="true";;
    d) rebuildCommandLine="true";;
    i) rebuildCommandLine="true"; rebuildTodeClient="true";;
    g) updateGsDevKitClones="true";;
    p) patchName="${OPTARG}";;
    s) updateSharedClones="true";;
    t) updateTodeClone="true";;
    *) usage; exit 1;;
  esac
done
shift $(($OPTIND - 1))

if [ "${noopts}" = "true" ]; then
  updateTodeClone="true"
  updateGsDevKitClones="true"
  rebuildCommandLine="true"
  rebuildTodeClient="true"
fi

source ${GS_HOME}/bin/private/gitFunctions

if [ "$updateGsDevKitClones" = "true" ]; then
  if [ "${GS_TRAVIS}x" = "x" ] ; then
    # on Travis, _home is not a git checkout
    updateClone $GSDEVKIT_HOME_GIT_CHECKOUT $GSDEVKIT_HOME_GIT_REMOTE "$GS_HOME"
  fi

  if [ -d "$GS_SERVER" ]; then
    updateClone $GSDEVKIT_SERVER_GIT_CHECKOUT $GSDEVKIT_SERVER_GIT_REMOTE "$GS_SERVER"
  fi

  if [ -d "$GS_CLIENT_DEV" ]; then
    $GS_CLIENT_DEV/bin/updateGsDevKit
  fi
  if [ -d "$GS_HOME/local" ] ; then
    if [ "$patchName" = "issue7" ] ; then
      # patch https://github.com/GsDevKit/GsDevKit_home/issues/7
      echo "PATCHING: https://github.com/GsDevKit/GsDevKit_home/issues/7"
      updateClone $GSDEVKIT_SYS_LOCAL_GIT_CHECKOUT $GSDEVKIT_SYS_LOCAL_GIT_REMOTE "$GS_HOME/local"
      $GS_HOME/bin/patches/patchIssue7
    else
      if [ "${patchName}x" != "x" ] ; then
	echo "unknown patch: $patchName (should be issue7)"
	exit 1
      fi
      echo "The directory $GS_HOME/local exists ----- you need to run a patch to fix Issue #7: see https://github.com/GsDevKit/GsDevKit_home/pull/9"
      exit 1
    fi
  fi
  if [ -d "$GS_SYS_LOCAL" ] && [ "${patchName}x" = "x" ]; then
    updateClone $GSDEVKIT_SYS_LOCAL_GIT_CHECKOUT $GSDEVKIT_SYS_LOCAL_GIT_REMOTE "$GS_SYS_LOCAL"
  fi
fi

if [ "$updateSharedClones" = "true" ] ; then
  $GS_HOME/bin/utils/updateSharedTodeProjectsClone both
else
  if [ "$updateTodeClone" = "true" ]; then
    if [ -d "${GS_SHARED_REPO}/tode" ] ; then
      updateClone $GS_SHARED_GIT_CHECKOUT_TODE $GS_SHARED_GIT_REMOTE_TODE ${GS_SHARED_REPO}/tode
    fi
  fi
fi

if [ "$rebuildCommandLine" = "true" ]; then
  $GS_HOME/bin/devKitCommandLine -F
fi

if [ "$rebuildTodeClient" = "true" ]; then
  if [ -d "$GS_CLIENT_DEV" ]; then
    pushd $GS_CLIENT_DEV_CLIENTS >& /dev/null
     for clientName in $(find . -maxdepth 1 -type d)
      do
        if [ "$clientName" != "." ] ; then
          ${GS_CLIENT_DEV_CLIENTS}/$clientName/updateClient $clientName
        fi
      done
    popd >& /dev/null
  fi  
fi

echo "...finished $(basename $0)"
