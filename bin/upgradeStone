#! /usr/bin/env bash
#=========================================================================
# Copyright (c) 2015, 2016 GemTalk Systems, LLC <dhenrich@gemtalksystems.com>.
#
#   MIT license: https://github.com/GsDevKit/GsDevKit_home/blob/master/license.txt
#=========================================================================

theArgs="$*"
source ${GS_HOME}/bin/private/shFeedback
start_banner

usage() {
  cat <<HELP
usage: $0 [-c] [-f] [-u] [-s <source-stone-extent-file-path>] [-l <post-load-tode-script> ]
	  <source-stone-name> <target-stone-name> <gemstone-version>

OPTIONS
  -h
     display help
  -c
     Create <target-stone-name> and exit script. Do not perform upgrade.
  -f
     Force creation of new stone by deleting 
     \$GS_HOME/gemstone/stone/<target-stone-name> directory if it exists
  -l <post-load-tode-script>
     tODE path to the tODE script that loads your application code
  -s <source-stone-extent-file-path> 
     Path to  <source-stone-name> extent file used as starting point for 
     upgrade.
  -u 
     Skip creation of <target-stone-name> and only run the upgrade step.

EXAMPLES
  $(basename $0) -h
  $(basename $0) -l /home/loadMyApplication gs_3106 gs_329 3.2.9
  $(basename $0) gs_3106 gs_329 3.2.9

HELP
}

PLATFORM="`uname -sm | tr ' ' '-'`"
if [[ "$PLATFORM" == MINGW32_NT* || "$PLATFORM" == MSYS_NT* ]] ; then
  exit_1_banner "This script is a server-only script and cannot be used on Windows"
fi

if [ "${GS_HOME}x" = "x" ] ; then
  exit_1_banner "The GS_HOME environment variable needs to be defined"
fi
source ${GS_HOME}/bin/defGsDevKit.env
if [ "$GS_SERVER{}x" = "x" ] ; then
  exit_1_banner "The \$GS_SERVER environment variable needs to be defined. Perhaps a stone has not been created yet?"
fi

forceArg=""
createStone="true"
runUpgrade="true"
hasSnapshotFile="false"
while getopts "cfhl:s:u" OPT ; do
  case "$OPT" in
    h) usage; exit 0;;
    c) runUpgrade="false";;
    f) forceArg="-f";; 
    l) postUpgradeLoadScriptPath="${OPTARG}";;
    s) 
       snapshotFile="${OPTARG}"
       hasSnapshotFile="true"
       ;;
    u) createStone="false";;
    *) usage; exit_1_banner "Uknown option";;
  esac
done
shift $(($OPTIND - 1))

if [ $# -ne 3 ]; then
  usage; exit_1_banner "Three positional arguments are required"
fi

sourceStoneName="$1"
targetStoneName="$2"
gsvers="$3"

sourceStonePath=$GS_SERVER_STONES/$sourceStoneName
targetStonePath=$GS_SERVER_STONES/$targetStoneName

if [ ! -d "$sourceStonePath" ] ; then
  exit_1_banner "The stone $sourceStoneName does not exist"
fi

sourceStoneVersion="$(sed -n '2{p;q;}' $sourceStonePath/product/version.txt| awk '{print $1;}')"
majorMinorVersion="${sourceStoneVersion:0:3}"

if [ "${hasSnapshotFile}" = "false" ] ; then
  snapshotFile="$GS_SERVER_STONES/$sourceStoneName/extents/extent0.dbf"
fi

cat <<EOF

Performing the GsDevKitHome upgrade from the stone "$sourceStoneName" to the
stone "$targetStoneName":

  1. executes the \$GS_HOME/bin/downloadGemStone to install GemStone $gsvers
  2. executes the \$GS_HOME/bin/createStone to create the $targetStoneName stone
  3. copy the extent0.dbf file from "$sourceStoneName to $targetStoneName
  4. create $targetStonePath/upgradeLog
  5. perform pre-upgrade tasks
  6. executes the \$GEMSTONE/bin/upgradeImage script
  7. executes the \$GEMSTONE/seaside/bin/upgradeSeasideImage script
  8. executes the \$GS_SERVER/bin/todeLoad in $targetStoneName stone
     to complete the upgrade process.
  9. executes the <post-load-tode-script> (-l option)
 10. perform post-upgrade tasks

If an error occurs during execution of this script, the details of the error are
available in the topazerrors.log file in the 
"$targetStonePath/upgradeLog"
directory or on stdout.

Press the return key to continue...
EOF
read prompt

$GS_HOME/bin/stopStone $sourceStoneName
if [ "${createStone}" = "true" ] ; then
  $GS_HOME/bin/downloadGemStone $gsvers
  $GS_HOME/bin/createStone $forceArg -g $targetStoneName $gsvers
  $GS_HOME/bin/stopStone $targetStoneName
fi

if [ "$majorMinorVersion" = "2.4" ]  ; then
  #Cannot use copydbf to copy a 2.4 extent to 3.x
  cp $snapshotFile $targetStonePath/extents/extent0.dbf
  chmod +w $targetStonePath/extents/extent0.dbf
else
  rm -rf $GS_SERVER_STONES/${targetStoneName}/extents/extent0.dbf
  $GS_HOME/bin/newExtent -n -s $snapshotFile $targetStoneName
fi
rm -rf $targetStonePath/tranlogs/tranlog*.dbf

pushd $targetStonePath >& /dev/null
  source stone.env

  if [ ! -d "upgradeLog" ] ; then
    mkdir upgradeLog
  fi
  cd upgradeLog
  export upgradeLogDir="$(pwd)"
popd >& /dev/null

if [ "$runUpgrade" = "false" ] ; then
  exit_0_banner "$targetStoneName created"
fi

if [ "$GEMSTONE}x" = "x" ] ; then
  exit_1_banner "\$GEMSTONE env var not set"
fi

echo "Performing pre upgrade tasks"
$GS_HOME/bin/devKitCommandLine preUpgradeStone $sourceStoneName $targetStoneName $gsvers

startStoneArg=""
if [ "$majorMinorVersion" = "2.4" ]  ; then
  startStoneArg="-C"
fi

$GS_HOME/bin/startStone $startStoneArg -b -w 5 $targetStoneName

pushd $upgradeLogDir >& /dev/null
  # start standard upgrade
  echo "STARTING standard upgradeImage "
  $GEMSTONE/bin/upgradeImage -s $GEMSTONE_NAME << EOF
  
EOF
  
  # Clear SystemLoginNotification #Subscriptions class variable
  echo "STARTING clear SystemLoginNotification #Subscriptions class variable"
  $GEMSTONE/bin/topaz -l -T50000 > $upgradeLogDir/topaz.out << EOF
  output pushnew $upgradeLogDir/topazClearSystemLoginNotification.out only
  set gemstone $targetStoneName
  
  display resultcheck
  level 0
  
  set user DataCurator pass swordfish
  login
  
  display oops
  iferr 1 stk
  iferr 2 stack
  iferr 3 input pop
  iferr 4 exit 1
  
  run
  (SystemLoginNotification _classVars at: #'Subscriptions') removeAll: (SystemLoginNotification _classVars at: #'Subscriptions').
  true
%
  commit

! patch for Issue #71 (GemStone bug 46059)
  run
  GsPackageLibrary 
    installMonticelloPackagesHome: (GsCurrentSession currentSession objectNamed: #'UserGlobals') 
    during: [:globals | 
      Class
        compileMethod: 'removeFromSystem
  | ar |
  ar := System myUserProfile dictionaryAndSymbolOf: self.
  ar ifNotNil: [ (ar at: 1) removeKey: (ar at: 2) ].'
	dictionaries: GsCurrentSession currentSession symbolList
	category: '*change-notification'
    ].
  true
%
  commit

  
  logout
  output pop
  exit 0
EOF

  # Setting BootstrapApplicationPostloadClassList (see https://github.com/GsDevKit/GsDevKit_home/issues/52)
  echo "Starting set BootstrapApplicationPostloadClassList"
  $GEMSTONE/bin/topaz -l -T50000 > $upgradeLogDir/topaz.out << EOF
  output pushnew $upgradeLogDir/topazClearSystemLoginNotification.out only
  set gemstone $targetStoneName
  
  display resultcheck
  level 0
  
  set user DataCurator pass swordfish
  login
  
  display oops
  iferr 1 stk
  iferr 2 stack
  iferr 3 input pop
  iferr 4 exit 1
  
  run
  UserGlobals at: #BootstrapApplicationPostloadClassList put: #( #SecureHashAlgorithm #MCFileTreeFileDirectoryUtils ).
  true
%
  commit
  
  logout
  output pop
  exit 0
EOF
  
  # use default Bootstrap globals for Seaside upgrade
  # start "seaside" upgrade to upgrade GLASS to 1.0-beta.9.1
  echo "STARTING upgradeSeasideImage"
  $GEMSTONE/seaside/bin/upgradeSeasideImage -s $targetStoneName << EOF
  
EOF
  
  # Remove all BaselineOf* classes ... so that they will be reloaded during tODE installation
  echo "STARTING remove BaselineOf* classes"
  $GEMSTONE/bin/topaz -l -T50000 > $upgradeLogDir/topaz.out << EOF
  output pushnew $upgradeLogDir/topazRemoveBaselines.out only
  set gemstone $targetStoneName
  
  display resultcheck
  level 0
  
  set user DataCurator pass swordfish
  login
  
  display oops
  iferr 1 stk
  iferr 2 stack
  iferr 3 input pop
  iferr 4 exit 1
  
  run
  UserGlobals associations do: [:assoc |
    assoc value isBehavior
      ifTrue: [
        | globalName |
        globalName := assoc key asString.
        (globalName ~= 'BaselineOf' and: [
             (globalName _findString: 'BaselineOf' startingAt: 1 ignoreCase: false) == 1 ])
           ifTrue: [
             GsFile gciLogServer: '  removing the baseline ', globalName printString.
             assoc value removeFromSystem ] ] ].
  true
%
  
  run
  MCWorkingCopy allManagers do: [ :wc | wc packageName = 'Grease' ifTrue: [ wc unregister ] ].
  true
%
  
  commit
  logout
  output pop
  exit 0
EOF
popd >& /dev/null  

echo "Installing tODE"
$GS_HOME/bin/todeLoad $targetStoneName
if [ "${createStone}" = "true" ] ; then
  if [ -d  $GS_SYS_STONES/$sourceStoneName/projects ] ; then
    cp -r $GS_SYS_STONES/$sourceStoneName/projects/. \
          $GS_SYS_STONES/$targetStoneName/projects/
  fi
  if [ -d  $GS_SYS_STONES/$sourceStoneName/home ] ; then
    cp -r $GS_SYS_STONES/$sourceStoneName/home/. \
          $GS_SYS_STONES/$targetStoneName/home/
  fi
fi


if [ "${postUpgradeLoadScriptPath}x" != "x" ] ;  then
  #install application code
  echo "Running ${postUpgradeLoadScriptPath} tODE script"

  $GS_HOME/bin/private/gsDevKitTodeCommandLine todeIt $targetStoneName << TODE
${postUpgradeLoadScriptPath}
TODE
fi

echo "Performing post upgrade tasks"
$GS_HOME/bin/devKitCommandLine postUpgradeStone $sourceStoneName $targetStoneName $gsvers

exit_0_banner "...finished"

