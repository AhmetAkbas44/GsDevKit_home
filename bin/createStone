#! /bin/bash
#=========================================================================
# Copyright (c) 2014, 2015 GemTalk Systems, LLC <dhenrich@gemtalksystems.com>.
#=========================================================================

echo "================="
echo "   GsDevKit script: $(basename $0) $*"
echo "              path: $0"
echo "================="

usage() {
  cat <<HELP
USAGE: $(basename $0) [-h] [-f] [-g] [-n] [-s <snapshot-file-path>]
                      [-t  <tode-snapshot-file-path>]
		      [-u <project-entry-url>] [-i <project-name>] [-l <project-name>]
                      <stone-name> <gemstone-version>

Create a new stone with the given stone name. Do not install tODE. Start stone
and netldi unless -n is specified.

If the -s option is not specified, \$GEMSTONE/bin/extent0.seaside.dbf will be used as 
the initial extent.

If you create a stone from an extent snapshot, you should use the -N
option to start the stone, the first time.

If the stone already exists, creation is skipped unless the -f otion is specified,
in which case the stone and netldi are stopped and the existing stone directory removed
before creation.

OPTIONS
  -h
     display help
  -f
     Force creation of new stone, by deleting 
     \$GS_SERVER/stones/<stone-name> directory if it exists
  -g 
     Do not install tODE in stone ... use initial extent unaltered
  -n
     No startStone, no startNetldi.
  -s <snapshot-file-path> 
     path to snapshot file used to create stone.
  -t <tode-snapshot-file-path>
     path to snapshot file used to create stone. It is assumed that the snapshot
     already has tODE installed and the snapshot will be attached to the
     existing \$GS_TODE/sys/stones/<stone-name> structure.
  -u <project-entry-url>
     Download the project entry at the given url into 
     \`/sys/local/stones/<stone-name>/projects\`. Runs the tODE
     \`project entry --url=<project-entry-url>\` command. tODE must already be installed via
     -t option.
  -i <project-name>
     Install the given project using the tODE \`project install <project-name>\`.
     tODE must already be installed via -t option.
  -l <project-name>
     Load the given project using the tODE \`project install <project-name.\`.
     tODE must already be installed via -t option.

EXAMPLES
  $(basename $0) -h
  $(basename $0) -g gs_329 3.2.9
  $(basename $0) gs_329 3.2.9
  $(basename $0) -f gs_329 3.2.9
  $(basename $0) -g -s \$GS_HOME/server/snapshots/extent0.tode.3.2.4.dbf gs_324 3.2.4
  $(basename $0) -t \$GS_HOME/server/snapshots/extent0.tode.3.2.4.dbf gs_324 3.2.4
  $(basename $0) -u http://gsdevkit.github.io/GsDevKit_seaside31/Seaside31.ston \
	         -t \$GS_HOME/server/snapshots/extent0.tode.3.2.4.dbf gs_324 3.2.4
  $(basename $0) -i Seaside3 \
                 -t \$GS_HOME/server/snapshots/extent0.tode.3.2.4.dbf gs_324 3.2.4
  $(basename $0) -l Seaside3 \
                 -t \$GS_HOME/server/snapshots/extent0.tode.3.2.4.dbf gs_324 3.2.4
  $(basename $0) -u http://gsdevkit.github.io/GsDevKit_seaside31/Seaside31.ston \
	         -i Seaside3 -l Seaside3 \
		 -t \$GS_HOME/server/snapshots/extent0.tode.3.2.4.dbf gs_324 3.2.4

HELP
}

PLATFORM="`uname -sm | tr ' ' '-'`"
if [[ "$PLATFORM" == MINGW32_NT* ]] ; then
  echo "This script is a server-only script and cannot be used on Windows"
  exit 1
fi

set -e # exit on error
if [ "${GS_HOME}x" = "x" ] ; then
  echo "the GS_HOME environment variable needs to be defined"; exit 1
fi
source ${GS_HOME}/bin/defGsDevKit.env

snapshotFileArg=""
noRestartArg=""
force=""
installTode="true"
todeSnapshotArg=""
entryUrl=""
installProjectName=""
loadProjectName=""
while getopts "fghns:t:u:i:l:" OPT ; do
  case "$OPT" in
    h) usage; exit 0;;
    f) force="true";; 
    g) installTode="false";;
    n) noRestartArg=" -n ";;
    s) snapshotFileArg=" -s ${OPTARG} ";;
    t) snapshotFileArg=" -s ${OPTARG} "; installTode="false"; todeSnapshotArg=" -t ";;
    u) entryUrl="${OPTARG}";;
    i) installProjectName="${OPTARG}";;
    l) loadProjectName="${OPTARG}";;
    *) usage; exit 1;;
  esac
done
shift $(($OPTIND - 1))

if [ $# -ne 2 ]; then
  echo "incorrect number of args $# (2 expected)"; usage; exit 1
fi
stoneName="$1"
vers="$2"

if [ "${GS_SERVER}x" = "x" ] ; then
  $GS_HOME/bin/private/clone_gs_server
  source ${GS_HOME}/bin/defGsDevKit.env
fi

if [ "${GS_SYS_LOCAL}x" = "x" ] ; then
  $GS_HOME/bin/private/clone_sys_local
  source ${GS_HOME}/bin/defGsDevKit.env
fi

if [ -d $GS_SERVER_STONES/$stoneName ] ; then
  if [ "${force}x" = "x" ] ; then
    echo "stone $stoneName already exists. Use the -f option to force re-creation"
    exit 1 
  else
    $GS_HOME/bin/deleteStone $stoneName
  fi
fi

echo "Creating stone $stoneName"

$GS_HOME/bin/downloadGemStone $vers

${GS_HOME}/bin/devKitCommandLine createStone $stoneName $vers

$GS_HOME/bin/newExtent $todeSnapshotArg $noRestartArg $snapshotFileArg $stoneName

if [ "${noRestartArg}x" = "x" ] ; then
  $GS_HOME/bin/startNetldi $stoneName
fi

if [ "$installTode" = "true" ] ; then
  $GS_SYS/bin/todeLoad $stoneName
fi

if [ "$entryUrl" != "" ] ; then
  $GS_HOME/bin/private/gsDevKitTodeCommandLine todeIt $stoneName << EOF
project entry --url=${entryUrl} /sys//stone/projects
EOF
fi

if [ "$installProjectName" != "" ] ; then
  $GS_HOME/bin/private/gsDevKitTodeCommandLine todeIt $stoneName << EOF
project install ${installProjectName}
EOF
fi

if [ "$loadProjectName" != "" ] ; then
  $GS_HOME/bin/private/gsDevKitTodeCommandLine todeIt $stoneName << EOF
project load ${loadProjectName}
EOF
fi

echo "...finished $(basename $0)"
