#! /usr/bin/env bash
#=========================================================================
# Copyright (c) 2014, 2015, 2016 GemTalk Systems, LLC <dhenrich@gemtalksystems.com>.
#
#   MIT license: https://github.com/GsDevKit/GsDevKit_home/blob/master/license.txt
#=========================================================================

echo "================="
echo "   GsDevKit script: $(basename $0) $*"
echo "              path: $0"
echo "================="

theArgs="$*"
source ${GS_HOME}/bin/private/shFeedback

usage() {
  cat <<HELP
USAGE: $(basename $0) [-h] [-f] [-D] [-F] [-t tode|pharo|gemtools|jade] <client-name> 
                      [ <client-specific-args> ]

Create a client of the given type and <client-name>.

If the client already exists, the installation is skipped unless the -f option 
is specified.

Currently only the "tode" and "pharo" types are implemented.

OPTIONS
  -h 
     display help
  -t gemtools|jade|pharo|tode|<client-specific-args>
     Create the specified client using the <client-specific-args>. 
     DEFAULT is '-t tode'.
  -f
     Force tODE client installation, whether or not the image
     already exists.
  -D
     Debug. Client creation will use a headful client for directly debugging errors.
  -F
     Delete entire client directory and start from scratch.

EXAMPLES
  $(basename $0) -h
  $(basename $0) -t -h

  $(basename $0) -t tode -h
  $(basename $0) -t tode todeDev
  $(basename $0) -t tode todeDev -p _0
  $(basename $0) -t pharo pharoClient -v Pharo5.0 -z \$GS_HOME/sys/local/pharo/pharoClient.ston
  $(basename $0) -t gemtools gemtools_329 3.2.9
  $(basename $0) -t jade jade_329 3.2.9

  # tode client (default)
  $(basename $0) -f
  $(basename $0)
  $(basename $0) todeDev -p _0
  $(basename $0) -f todeDev -p _0

  # pharo client (default)
  $(basename $0) -t pharo -h
  $(basename $0) -t pharo pharoClient -v Pharo5.0
  $(basename $0) -D -t pharo pharoClient -v Pharo5.0
  $(basename $0) -f -t pharo pharoClient -v Pharo5.0
  $(basename $0) -t pharo pharoClient -v Pharo5.0 -z \$GS_HOME/shared/repos/GemStone-GCI/.smalltalk.ston
  $(basename $0) -t pharo pharoClient -v Pharo5.0 -s gs_329 -z \$GS_HOME/shared/repos/GemStone-GCI/.smalltalk.ston
  $(basename $0) -f -t pharo pharoClient -v Pharo5.0 -z \$GS_HOME/shared/repos/GemStone-GCI/.smalltalk.ston

  $(basename $0) -t pharo pharoClient -l -v Pharo5.0 -z \$GS_HOME/shared/repos/GemStone-GCI/.smalltalk.ston
  $(basename $0) -t pharo pharoClient -l -v Pharo5.0 -s gs_329 -z \$GS_HOME/shared/repos/GemStone-GCI/.smalltalk.ston
  $(basename $0) -f -t pharo pharoClient -l -v Pharo5.0 -z \$GS_HOME/shared/repos/GemStone-GCI/.smalltalk.ston

  $(basename $0) -t pharo pharoClient -v Pharo5.0 -y \$GS_HOME/shared/repos/GemStone-GCI -z \$GS_HOME/sys/local/pharo/customeGciClient.ston
  $(basename $0) -t pharo pharoClient -v Pharo5.0 -s gs_329 -y \$GS_HOME/shared/repos/GemStone-GCI -z \$GS_HOME/sys/local/pharo/customeGciClient.ston
  $(basename $0) -f -t pharo pharoClient -v Pharo5.0 -y \$GS_HOME/shared/repos/GemStone-GCI -z \$GS_HOME/sys/local/pharo/customeGciClient.ston

  # gemtools client (not implemented yet)
  $(basename $0) -t gemtools -h
  $(basename $0) -t gemtools gt_329 3.2.9
  $(basename $0) -f -t gemtools gt_329 3.2.9

  # jade client (not implemented yet)
  $(basename $0) -t jade -h
  $(basename $0) -t jade j_329 3.2.9
  $(basename $0) -f -t jade j_329 3.2.9

HELP
}

set -e # exit on error
if [ "${GS_HOME}x" = "x" ] ; then
  banner_error "the GS_HOME environment variable needs to be defined :: $(basename $0) $theArgs"
fi
source ${GS_HOME}/bin/defGsDevKit.env

source ${GS_HOME}/bin/private/shFunctions
verify_gsdevkit_installation

clientType="tode"
forceArg=""
deleteClientDir="false"
debugArg=""
showHelp="false"
typeArg=""
while getopts "fht:FD" OPT ; do
  case "$OPT" in
    h) showHelp="true" ;;
    f) forceArg=" -f " ;;
    F) deleteClientDir="true" ;;
    D) debugArg=" -D ";;
    t) typeArg="set"; clientType="${OPTARG}" ;;
    *) usage; banner_error "Uknown option :: $(basename $0) $theArgs";;
  esac
done
shift $(($OPTIND - 1))

if [ "${showHelp}" = "true" ]; then
  if [ "$typeArg" = "set"  ] && [ "${GS_TODE_CLIENT}x" != "x" ]; then
    ${GS_TODE_CLIENT}/bin/createClient -h
    exit 0
  fi
  usage
  exit 0
fi

if [ $# -lt 1 ]; then
  usage; banner_error "missing cient name argument :: $(basename $0) $theArgs"
fi
clientName=$1
shift 1

if [ "${GS_CLIENT_DEV}x" = "x" ] ; then
  $GS_HOME/bin/private/clone_gs_client_dev
  source ${GS_HOME}/bin/defGsDevKit.env
fi

if [ "${GS_SYS_LOCAL}x" = "x" ] ; then
  $GS_HOME/bin/private/clone_sys_local
  source ${GS_HOME}/bin/defGsDevKit.env
fi

if [ "${deleteClientDir}" = "true" ] ; then
  $GS_HOME/bin/deleteClient $clientName
fi

todeArg=""
case $clientType in
  tode)
    if [ "${GS_TODE_CLIENT}x" = "x" ] ; then
      ${GS_HOME}/bin/private/clone_todeClient
      source ${GS_HOME}/bin/defGsDevKit.env
    fi
    ${GS_TODE_CLIENT}/bin/createClient $debugArg $forceArg $* $clientName
    ;;
  pharo)
    if [ "${GS_TODE_CLIENT}x" = "x" ] ; then
      ${GS_HOME}/bin/private/clone_todeClient
      source ${GS_HOME}/bin/defGsDevKit.env
    fi
    ${GS_TODE_CLIENT}/bin/createClient -c $debugArg $forceArg $* $clientName
    ;;
  gemtools)
    ;;
  jade)
    ;;
  *) usage; banner_error "Unknown client type: $clientType :: $(basename $0) $theArgs";;
esac

banner_finished "...finished $(basename $0) $theArgs"
